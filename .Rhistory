}
getmatrix <- function() x
setsolve <- function(x) m <<- solve(x)
getsolve <- function() m
list(setmatrix = setmatrix, getmatrix = getmatrix,
setsolve = setsolve,
getsolve = getsolve)
}
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
setmatrix <- function(matrix, y, nrow, ncol) {
y <- c(1, 2, 4, 5, 1, 6, 7, 3, 5)
nrow <- 3
ncol <- 3
x <<- y
m <<- NULL
}
getmatrix <- function() x
setsolve <- function(x) m <<- solve(x)
getsolve <- function() m
list(setmatrix = setmatrix, getmatrix = getmatrix,
setsolve = setsolve,
getsolve = getsolve)
}
x$setmatrix()
x[setmatrix()]
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
setmatrix <- function(matrix, x, nrow, ncol) {
y <- c(1, 2, 4, 5, 1, 6, 7, 3, 5)
nrow <- 3
ncol <- 3
x <<- y
m <<- NULL
}
getmatrix <- function() x
setsolve <- function(x) m <<- solve(x)
getsolve <- function() m
list(setmatrix = setmatrix, getmatrix = getmatrix,
setsolve = setsolve,
getsolve = getsolve)
}
setmatrix <- function(matrix, x, nrow, ncol) {
y <- c(1, 2, 4, 5, 1, 6, 7, 3, 5)
nrow <- 3
ncol <- 3
x <<- y
m <<- NULL
}
setmatrix <- function(matrix(x, nrow, ncol)) {
y <- c(1, 2, 4, 5, 1, 6, 7, 3, 5)
nrow <- 3
ncol <- 3
x <<- y
m <<- NULL
}
setmatrix <- function(matrix, x, nrow, ncol) {
y <- c(1, 2, 4, 5, 1, 6, 7, 3, 5)
nrow <- 3
ncol <- 3
x <<- y
m <<- NULL
}
setmatrix()
setmatrix(y, nrow, ncol)
z <- setmatrix(y, nrow, ncol)
z
z <- setmatrix(y, 3, 3)
z
setmatrix <- function(matrix, x) {
y = c(1, 3, 2, 4)
z = matrix(y, 2)
x <<- z
m <<- NULL
}
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
setmatrix <- function(matrix, x) {
y = c(1, 3, 2, 4)
z = matrix(y, 2)
x <<- z
m <<- NULL
}
getmatrix <- function() x
setsolve <- function(x) m <<- solve(x)
getsolve <- function() m
list(setmatrix = setmatrix, getmatrix = getmatrix,
setsolve = setsolve,
getsolve = getsolve)
}
cacheSolve <- function(x, ...) {
m <- x$getsolve()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$setmatrix()
m <- solve(data, ...)
x$setsolve(m)
m
## Return a matrix that is the inverse of 'x'
}
x$setmatrix()
makeCacheMatrix()
x <- makeCacheMatrix(matrix(1:25, nrow = 5, ncol = 5))
x$getsolve()
x$setmatrix()
x$get()
x$setsolve()
?solve
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
setmatrix <- function(matrix, x) {
y = c(1, 3, 2, 4)
z = matrix(y, 2)
x <<- z
m <<- NULL
}
getmatrix <- function() x
setsolve <- function(x) m <<- solve(x)
getsolve <- function() m
list(setmatrix = setmatrix, getmatrix = getmatrix,
setsolve = setsolve,
getsolve = getsolve)
}
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
setmatrix <- function(matrix, x) {
y = c(1, 3, 2, 4)
z = matrix(y, 2)
x <<- z
m <<- NULL
}
getmatrix <- function() x
setsolve <- function(x) m <<- solve(x)
getsolve <- function() m
list(setmatrix = setmatrix, getmatrix = getmatrix,
setsolve = setsolve,
getsolve = getsolve)
}
x$setmatrix()
x <- makeCacheMatrix()
x$setmatrix()
x$getsolve()
x$setmatrix()
x$get()
x$setsolve()
?solve
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
setmatrix <- function(matrix, x) {
y = c(1, 3, 2, 4)
z = matrix(y, 2)
x <<- z
m <<- NULL
}
getmatrix <- function() x
setsolve <- function(x) m <<- solve(x)
getsolve <- function() m
list(setmatrix = setmatrix, getmatrix = getmatrix,
setsolve = setsolve,
getsolve = getsolve)
}
source('C:/Users/rwest01/Desktop/R_Work/Programmingassignment2.R')
makeCacheMatrix <- function(matrix(x)) {
m <- NULL
setmatrix <- function(matrix, x) {
y = c(1, 3, 2, 4)
z = matrix(y, 2)
x <<- z
m <<- NULL
}
getmatrix <- function() x
setsolve <- function(x) m <<- solve(x)
getsolve <- function() m
list(setmatrix = setmatrix, getmatrix = getmatrix,
setsolve = setsolve,
getsolve = getsolve)
}
makeCacheMatrix <- function(matrix(x)) {
m <- NULL
setmatrix <- function(matrix, x) {
y = c(1, 3, 2, 4)
z = matrix(y, 2)
x <<- z
m <<- NULL
}
getmatrix <- function() x
setsolve <- function(x) m <<- solve(x)
getsolve <- function() m
list(setmatrix = setmatrix, getmatrix = getmatrix,
setsolve = setsolve,
getsolve = getsolve)
makeCacheMatrix <- function(matrix(x)) {
m <- NULL
setmatrix <- function(matrix, x) {
y = c(1, 3, 2, 4)
z = matrix(y, 2)
x <<- z
m <<- NULL
}
getmatrix <- function() x
setsolve <- function(x) m <<- solve(x)
getsolve <- function() m
list(setmatrix = setmatrix, getmatrix = getmatrix,
setsolve = setsolve,
getsolve = getsolve)
makeCacheMatrix <- function(matrix, x) {
m <- NULL
setmatrix <- function(matrix, x) {
y = c(1, 3, 2, 4)
z = matrix(y, 2)
x <<- z
m <<- NULL
}
getmatrix <- function() x
setsolve <- function(x) m <<- solve(x)
getsolve <- function() m
list(setmatrix = setmatrix, getmatrix = getmatrix,
setsolve = setsolve,
getsolve = getsolve)
}
x$setmatrix()
z = matrix(y, 2)
y = c(1, 3, 2, 4)
z = matrix(y, 2)
x <<- z
m <<- NULL
x$setmatrix()
makeCacheMatrix$setmatrix()
makeCacheMatrix <- function(matrix, x) {
m <- NULL
setmatrix <- function(matrix, x) {
y = c(1, 3, 2, 4)
z = matrix(y, 2)
x <<- z
m <<- NULL
}
getmatrix <- function() x
setsolve <- function(x) m <<- solve(x)
getsolve <- function() m
list(setmatrix = setmatrix, getmatrix = getmatrix,
setsolve = setsolve,
getsolve = getsolve)
}
makeCacheMatrix <- function(matrix, x) {
m <- NULL
setmatrix <- function(matrix, x) {
y = c(1, 3, 2, 4)
z = matrix(y, 2)
x <<- z
m <<- NULL
}
getmatrix <- function() x
setsolve <- function(x) m <<- solve(x)
getsolve <- function() m
list(setmatrix = setmatrix, getmatrix = getmatrix,
setsolve = setsolve,
getsolve = getsolve)
}
cacheSolve <- function(x, ...) {
m <- x$getsolve()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$setmatrix()
m <- solve(data, ...)
x$setsolve(m)
m
## Return a matrix that is the inverse of 'x'
}
y = c(1, 3, 2, 4)
z = matrix(y, 2)
makeCacheMatrix <- function(x = matrix) {
m <- NULL
setmatrix <- function(matrix, x) {
y = c(1, 3, 2, 4)
z = matrix(y, 2)
x <<- z
m <<- NULL
}
getmatrix <- function() x
setsolve <- function(x) m <<- solve(x)
getsolve <- function() m
list(setmatrix = setmatrix, getmatrix = getmatrix,
setsolve = setsolve,
getsolve = getsolve)
}
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
setmatrix <- function(matrix, x) {
y = c(1, 3, 2, 4)
z = matrix(y, 2)
x <<- z
m <<- NULL
}
getmatrix <- function() x
setsolve <- function(x) m <<- solve(x)
getsolve <- function() m
list(setmatrix = setmatrix, getmatrix = getmatrix,
setsolve = setsolve,
getsolve = getsolve)
}
makeCacheMatrix()
test <- makeCacheMatrix()
test
test$setmatrix()
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
setmatrix <- function(x) {
y = c(1, 3, 2, 4)
z = matrix(y, 2)
x <<- z
m <<- NULL
}
getmatrix <- function() x
setsolve <- function(x) m <<- solve(x)
getsolve <- function() m
list(setmatrix = setmatrix, getmatrix = getmatrix,
setsolve = setsolve,
getsolve = getsolve)
}
test <- makeCacheMatrix()
test$setmatrix()
makeCacheMatrix$setmatrix()
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
setmatrix <- function(y) {
y = matrix(c(1, 3, 2, 4), 2)
x <<- y
m <<- NULL
}
getmatrix <- function() x
setsolve <- function(x) m <<- solve(x)
getsolve <- function() m
list(setmatrix = setmatrix, getmatrix = getmatrix,
setsolve = setsolve,
getsolve = getsolve)
}
?function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
setmatrix <- function(y) {
y <- matrix(c(1, 3, 2, 4), 2)
x <<- y
m <<- NULL
}
getmatrix <- function() x
setsolve <- function(x) m <<- solve(x)
getsolve <- function() m
list(setmatrix = setmatrix, getmatrix = getmatrix,
setsolve = setsolve,
getsolve = getsolve)
}
test <- makeCacheMatrix()
test$setmatrix()
test$setmatrix(y)
y
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
setmatrix <- function(y) {
y <- function() y <- matrix(c(1, 3, 2, 4), 2)
x <<- y
m <<- NULL
}
getmatrix <- function() x
setsolve <- function(x) m <<- solve(x)
getsolve <- function() m
list(setmatrix = setmatrix, getmatrix = getmatrix,
setsolve = setsolve,
getsolve = getsolve)
}
test <- makeCacheMatrix()
test$setmatrix(y)
y
test$setmatrix()
y <- test$setmatrix()
source('C:/Users/rwest01/Desktop/R_Work/Programmingassignment2.R')
z <- matrix(c(1, 7, 5, 9), 2)
cacheSolve(makeCacheMatrix(z))
makeCacheMatrix <- function(x = matrix()) {
inverse <- NULL
setmatrix <- function(y) {
x <<- y
inverse <<- NULL
}
getmatrix <- function() x
setsolve <- function() inverse <<- solve(x)
getsolve <- function() inverse
list(setmatrix = setmatrix, getmatrix = getmatrix,
setsolve = setsolve,
getsolve = getsolve)
}
## Write a short comment describing this function
## This function is good to go
cacheSolve <- function(x, ...) {
inverse <- x$getsolve()
if(!is.null(inverse)) {
message("getting cached data")
return(inverse)
}
data <- x$getmatrix()
inverse <- solve(data, ...)
x$setsolve <- function() {
inverse <- solve(data)
}
inverse
}
z <- matrix(c(1, 7, 5, 9), 2)
cacheSolve(makeCacheMatrix(z))
x$setmatrix()
x <- makeCacheMatrix()
x$setmatrix()
x <- makeCacheMatrix(z)
x$setmatrix()
?colnames
x <- matrix(1:10, nrow = 5, ncol = 2)
x <- data.frame(1:10, nrow = 5, ncol = 2)
View(x)
x <- data.frame(matrix(1:10, nrow = 5, ncol = 2))
View(x)
colnames(x) <- x$X2
View(x)
colnames(x) <- x[, 2]
rownames(x) <- x[, 2]
View(x)
x <- data.frame(matrix(1:10, nrow = 5, ncol = 2))
View(x)
x <- data.frame(matrix(1:10, nrow = 5, ncol = 2))
x
rownames(x) <- x[, 2]
x
setwd("C:/Users/rwest01/Desktop/R_Work/GitHub/ExData_Plotting1")
library("sqldf", lib.loc="C:/Program Files/R/R-3.0.3/library")
data <- read.csv.sql("household_power_consumption.txt", sql = "SELECT * from file WHERE Date = '1/2/2007' OR Date = '2/2/2007'", sep = ";")
setwd("C:/Users/rwest01/Desktop/R_Work/GitHub/ExData_Plotting1")
data <- read.csv.sql("household_power_consumption.txt", sql = "SELECT * from file WHERE Date = '1/2/2007' OR Date = '2/2/2007'", sep = ";")
data <- read.csv.sql("household_power_consumption.txt", sql = "SELECT * from file WHERE Date = '1/2/2007' OR Date = '2/2/2007'", sep = ";")
data$DateTime <- strptime(paste(data$Date, data$Time), format = "%d/%m/%Y %H:%M:%S")
str(data)
hist(data$Global_active_power, col = "orangered", main = "Global Active Power", xlab = "Global Active Power (kilowatts)")
plot(data$DateTime, data$Global_active_power, type = 'l', xlab = "", ylab = "Global Active Power (kilowatts)")
par(mfrow = c(1, 1))
with(data, {
plot(data$DateTime, data$Sub_metering_1, type = 'l', xlab = "", ylab = "Energy sub metering")
lines(data$DateTime, data$Sub_metering_2, type = 'l', xlab = "", col = "red")
lines(data$DateTime, data$Sub_metering_3, type = 'l', xlab = "", col = "blue")
legend("topright", c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), lty = c(1, 1, 1), col = c("black", "red", "blue"))
})
par(mfrow = c(2, 2))
plot(data$DateTime, data$Global_active_power, type = "l", xlab = "", ylab = "Global Active Power")
plot(data$DateTime, data$Voltage, type = "l", xlab = "datetime", ylab = "Voltage")
with(data, {
plot(data$DateTime, data$Sub_metering_1, type = 'l', xlab = "", ylab = "Energy sub metering")
lines(data$DateTime, data$Sub_metering_2, type = 'l', xlab = "", col = "red")
lines(data$DateTime, data$Sub_metering_3, type = 'l', xlab = "", col = "blue")
legend("topright", c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), lty = c(1, 1, 1), col = c("black", "red", "blue"))
})
plot(data$DateTime, data$Global_reactive_power, type = "l", xlab = "datetime", ylab = "Global_reactive_power")
library(sqldf)
View(data)
data$DateTime <- strptime(paste(data$Date, data$Time), format = "%d/%m/%Y %H:%M:%S")
hist(data$Global_active_power, col = "orangered", main = "Global Active Power", xlab = "Global Active Power (kilowatts)")
par(mfrow = c(1, 1))
hist(data$Global_active_power, col = "orangered", main = "Global Active Power", xlab = "Global Active Power (kilowatts)")
?png
png(filename = "plot1.png", width = 480, height = 480, units = "px")
hist(data$Global_active_power, col = "orangered", main = "Global Active Power", xlab = "Global Active Power (kilowatts)")
dev.off()
png(filename = "plot2.png", width = 480, height = 480, units = "px")
plot(data$DateTime, data$Global_active_power, type = 'l', xlab = "", ylab = "Global Active Power (kilowatts)")
dev.off()
with(data, {
plot(data$DateTime, data$Sub_metering_1, type = 'l', xlab = "", ylab = "Energy sub metering")
lines(data$DateTime, data$Sub_metering_2, type = 'l', xlab = "", col = "red")
lines(data$DateTime, data$Sub_metering_3, type = 'l', xlab = "", col = "blue")
legend("topright", c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), lty = c(1, 1, 1), col = c("black", "red", "blue"))
})
png(filename = "plot3.png", width = 480, height = 480, units = "px")
with(data, {
plot(data$DateTime, data$Sub_metering_1, type = 'l', xlab = "", ylab = "Energy sub metering")
lines(data$DateTime, data$Sub_metering_2, type = 'l', xlab = "", col = "red")
lines(data$DateTime, data$Sub_metering_3, type = 'l', xlab = "", col = "blue")
legend("topright", c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), lty = c(1, 1, 1), col = c("black", "red", "blue"))
})
dev.off()
png(filename = "plot4.png", width = 480, height = 480, units = "px")
par(mfrow = c(2, 2))
plot(data$DateTime, data$Global_active_power, type = "l", xlab = "", ylab = "Global Active Power")
plot(data$DateTime, data$Voltage, type = "l", xlab = "datetime", ylab = "Voltage")
with(data, {
plot(data$DateTime, data$Sub_metering_1, type = 'l', xlab = "", ylab = "Energy sub metering")
lines(data$DateTime, data$Sub_metering_2, type = 'l', xlab = "", col = "red")
lines(data$DateTime, data$Sub_metering_3, type = 'l', xlab = "", col = "blue")
legend("topright", c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), lty = c(1, 1, 1), col = c("black", "red", "blue"))
})
plot(data$DateTime, data$Global_reactive_power, type = "l", xlab = "datetime", ylab = "Global_reactive_power")
dev.off
dev.off()
png(filename = "plot4.png", width = 480, height = 480, units = "px")
par(mfrow = c(2, 2))
plot(data$DateTime, data$Global_active_power, type = "l", xlab = "", ylab = "Global Active Power")
plot(data$DateTime, data$Voltage, type = "l", xlab = "datetime", ylab = "Voltage")
with(data, {
plot(data$DateTime, data$Sub_metering_1, type = 'l', xlab = "", ylab = "Energy sub metering")
lines(data$DateTime, data$Sub_metering_2, type = 'l', xlab = "", col = "red")
lines(data$DateTime, data$Sub_metering_3, type = 'l', xlab = "", col = "blue")
legend("topright", c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), lty = c(1, 1, 1), col = c("black", "red", "blue"), bty = "n")
})
plot(data$DateTime, data$Global_reactive_power, type = "l", xlab = "datetime", ylab = "Global_reactive_power")
dev.off()
